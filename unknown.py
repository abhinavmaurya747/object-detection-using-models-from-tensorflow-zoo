#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 30, 2020 03:24:25 PM IST  platform: Windows NT

import sys

try:
    import Tkinter as tk
    from Tkinter import*
except ImportError:
    import tkinter as tk
    from tkinter import*

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import unknown_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    unknown_support.set_Tk_var()
    top = Toplevel1 (root)
    unknown_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    unknown_support.set_Tk_var()
    top = Toplevel1 (w)
    unknown_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1241x676+291+201")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.001, relwidth=0.2)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Frame1_1 = tk.Frame(self.Frame1)
        self.Frame1_1.place(relx=2.161, rely=0.575, relheight=1.0, relwidth=1.0)
        self.Frame1_1.configure(relief='groove')
        self.Frame1_1.configure(borderwidth="2")
        self.Frame1_1.configure(relief="groove")
        self.Frame1_1.configure(background="#d9d9d9")
        self.Frame1_1.configure(highlightbackground="#d9d9d9")
        self.Frame1_1.configure(highlightcolor="black")

        self.Open_Folder = tk.Button(self.Frame1)
        self.Open_Folder.place(relx=0.081, rely=0.03, height=50, width=200)
        self.Open_Folder.configure(activebackground="#ececec")
        self.Open_Folder.configure(activeforeground="#000000")
        self.Open_Folder.configure(background="#d9d9d9")
        self.Open_Folder.configure(command=unknown_support.open_folder)
        self.Open_Folder.configure(disabledforeground="#a3a3a3")
        self.Open_Folder.configure(foreground="#000000")
        self.Open_Folder.configure(highlightbackground="#d9d9d9")
        self.Open_Folder.configure(highlightcolor="black")
        self.Open_Folder.configure(pady="0")
        self.Open_Folder.configure(text='''Open Folder''')

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.081, rely=0.207, height=50, width=200)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=unknown_support.next_image)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Next Image''')

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.081, rely=0.414, height=50, width=200)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=unknown_support.prev_image)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Previous Image''')

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.822, rely=0.0, relheight=1.0, relwidth=0.201)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.Button3 = tk.Button(self.Frame2)
        self.Button3.place(relx=0.04, rely=0.842, height=50, width=200)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=unknown_support.detect)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Detect''')

        self.Label2 = tk.Label(self.Frame2)
        self.Label2.place(relx=0.04, rely=0.03, height=50, width=201)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Select Model''')

        self.Frame4 = tk.Frame(self.Frame2)
        self.Frame4.place(relx=0.04, rely=0.118, relheight=0.257, relwidth=0.827)

        self.Frame4.configure(relief='groove')
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief="groove")
        self.Frame4.configure(background="#d9d9d9")
        self.Frame4.configure(highlightbackground="#d9d9d9")
        self.Frame4.configure(highlightcolor="black")

        self.Checkbutton1 = tk.Checkbutton(self.Frame4)
        self.Checkbutton1.place(relx=0.049, rely=0.057, relheight=0.345
                , relwidth=0.903)
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(font="-family {Segoe UI} -size 10")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(pady="3")
        self.Checkbutton1.configure(text='''faster_rcnn_
  inception_v2_coco''')
        self.Checkbutton1.configure(variable=unknown_support.che61)

        self.Checkbutton1_3 = tk.Checkbutton(self.Frame4)
        self.Checkbutton1_3.place(relx=0.049, rely=0.345, relheight=0.345
                , relwidth=0.903)
        self.Checkbutton1_3.configure(activebackground="#ececec")
        self.Checkbutton1_3.configure(activeforeground="#000000")
        self.Checkbutton1_3.configure(anchor='w')
        self.Checkbutton1_3.configure(background="#d9d9d9")
        self.Checkbutton1_3.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_3.configure(font="-family {Segoe UI} -size 10")
        self.Checkbutton1_3.configure(foreground="#000000")
        self.Checkbutton1_3.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_3.configure(highlightcolor="black")
        self.Checkbutton1_3.configure(justify='left')
        self.Checkbutton1_3.configure(text='''ssd_inception_v2_
  coco''')
        self.Checkbutton1_3.configure(variable=unknown_support.che62)

        self.Checkbutton1_4 = tk.Checkbutton(self.Frame4)
        self.Checkbutton1_4.place(relx=0.049, rely=0.632, relheight=0.345
                , relwidth=0.903)
        self.Checkbutton1_4.configure(activebackground="#ececec")
        self.Checkbutton1_4.configure(activeforeground="#000000")
        self.Checkbutton1_4.configure(anchor='w')
        self.Checkbutton1_4.configure(background="#d9d9d9")
        self.Checkbutton1_4.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_4.configure(font="-family {Segoe UI} -size 10")
        self.Checkbutton1_4.configure(foreground="#000000")
        self.Checkbutton1_4.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_4.configure(highlightcolor="black")
        self.Checkbutton1_4.configure(justify='left')
        self.Checkbutton1_4.configure(text='''ssdlite_mobilenet
  _v2_coco''')
        self.Checkbutton1_4.configure(variable=unknown_support.che63)

        self.Label3 = tk.Label(self.Frame2)
        self.Label3.place(relx=0.08, rely=0.399, height=26, width=141)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Detection Threshold''')

        self.Frame4_6 = tk.Frame(self.Frame2)
        self.Frame4_6.place(relx=0.04, rely=0.459, relheight=0.345
                , relwidth=0.827)
        self.Frame4_6.configure(relief='groove')
        self.Frame4_6.configure(borderwidth="2")
        self.Frame4_6.configure(relief="groove")
        self.Frame4_6.configure(background="#d9d9d9")
        self.Frame4_6.configure(highlightbackground="#d9d9d9")
        self.Frame4_6.configure(highlightcolor="black")

        self.Label4 = tk.Label(self.Frame4_6)
        self.Label4.place(relx=0.049, rely=0.043, height=46, width=181)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Label Filter''')

        self.Checkbutton2 = tk.Checkbutton(self.Frame4_6)
        self.Checkbutton2.place(relx=0.049, rely=0.258, relheight=0.133
                , relwidth=0.913)
        self.Checkbutton2.configure(activebackground="#ececec")
        self.Checkbutton2.configure(activeforeground="#000000")
        self.Checkbutton2.configure(anchor='w')
        self.Checkbutton2.configure(background="#d9d9d9")
        self.Checkbutton2.configure(disabledforeground="#a3a3a3")
        self.Checkbutton2.configure(foreground="#000000")
        self.Checkbutton2.configure(highlightbackground="#d9d9d9")
        self.Checkbutton2.configure(highlightcolor="black")
        self.Checkbutton2.configure(justify='left')
        self.Checkbutton2.configure(text='''Person''')
        self.Checkbutton2.configure(variable=unknown_support.che44)

        self.Checkbutton3 = tk.Checkbutton(self.Frame4_6)
        self.Checkbutton3.place(relx=0.049, rely=0.386, relheight=0.133
                , relwidth=0.913)
        self.Checkbutton3.configure(activebackground="#ececec")
        self.Checkbutton3.configure(activeforeground="#000000")
        self.Checkbutton3.configure(anchor='w')
        self.Checkbutton3.configure(background="#d9d9d9")
        self.Checkbutton3.configure(disabledforeground="#a3a3a3")
        self.Checkbutton3.configure(foreground="#000000")
        self.Checkbutton3.configure(highlightbackground="#d9d9d9")
        self.Checkbutton3.configure(highlightcolor="black")
        self.Checkbutton3.configure(justify='left')
        self.Checkbutton3.configure(text='''Cat''')
        self.Checkbutton3.configure(variable=unknown_support.che45)

        self.Checkbutton4 = tk.Checkbutton(self.Frame4_6)
        self.Checkbutton4.place(relx=0.049, rely=0.515, relheight=0.133
                , relwidth=0.913)
        self.Checkbutton4.configure(activebackground="#ececec")
        self.Checkbutton4.configure(activeforeground="#000000")
        self.Checkbutton4.configure(anchor='w')
        self.Checkbutton4.configure(background="#d9d9d9")
        self.Checkbutton4.configure(disabledforeground="#a3a3a3")
        self.Checkbutton4.configure(foreground="#000000")
        self.Checkbutton4.configure(highlightbackground="#d9d9d9")
        self.Checkbutton4.configure(highlightcolor="black")
        self.Checkbutton4.configure(justify='left')
        self.Checkbutton4.configure(text='''Dog''')
        self.Checkbutton4.configure(variable=unknown_support.che46)

        self.Checkbutton5 = tk.Checkbutton(self.Frame4_6)
        self.Checkbutton5.place(relx=0.049, rely=0.644, relheight=0.133
                , relwidth=0.913)
        self.Checkbutton5.configure(activebackground="#ececec")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(anchor='w')
        self.Checkbutton5.configure(background="#d9d9d9")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(text='''Bottle''')
        self.Checkbutton5.configure(variable=unknown_support.che47)

        self.Checkbutton6 = tk.Checkbutton(self.Frame4_6)
        self.Checkbutton6.place(relx=0.049, rely=0.773, relheight=0.133
                , relwidth=0.913)
        self.Checkbutton6.configure(activebackground="#ececec")
        self.Checkbutton6.configure(activeforeground="#000000")
        self.Checkbutton6.configure(anchor='w')
        self.Checkbutton6.configure(background="#d9d9d9")
        self.Checkbutton6.configure(disabledforeground="#a3a3a3")
        self.Checkbutton6.configure(foreground="#000000")
        self.Checkbutton6.configure(highlightbackground="#d9d9d9")
        self.Checkbutton6.configure(highlightcolor="black")
        self.Checkbutton6.configure(justify='left')
        self.Checkbutton6.configure(text='''Chair''')
        self.Checkbutton6.configure(variable=unknown_support.che48)

        self.Entry1 = tk.Entry(self.Frame2)
        self.Entry1.place(relx=0.683, rely=0.399,height=24, relwidth=0.177)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=unknown_support.threshold_value)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.Entry1, tooltip_font, '''Value between 0 and 1''', delay=0.5)

        self.Frame3 = tk.Frame(top)
        self.Frame3.place(relx=0.2, rely=0.0, relheight=1.001, relwidth=0.624)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame3)
        self.Label1.place(relx=0.008, rely=0.061, height=570, width=760)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"test1.jpg")
        print(photo_location)
        global _img0
        _img0 = PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





