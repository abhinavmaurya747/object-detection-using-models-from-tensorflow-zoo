#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 31, 2020 11:43:15 AM IST  platform: Windows NT

import sys
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import cv2
from PIL import Image,ImageTk
import image_object_detection
import ssdlite_object_detection
from tkinter.filedialog import asksaveasfile

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


files_path=[]           #files_path contains the path of images where they are stored
active_image=None       #active_image is the currently image being displayed. It contains an integer which denotes the index of files_path

def set_Tk_var():
    global model1
    model1 = tk.IntVar()
    global model2
    model2 = tk.IntVar()
    global model3
    model3 = tk.IntVar()
    global threshold
    threshold = tk.StringVar()
    global person_check
    person_check = tk.IntVar()
    global cat_check
    cat_check = tk.IntVar()
    global dog_check
    dog_check = tk.IntVar()
    global bottle_check
    bottle_check = tk.IntVar()
    global chair_check
    chair_check = tk.IntVar()

    model1.set(1)
    threshold.set('0.6')
    person_check.set(1)
    cat_check.set(1)
    dog_check.set(1)
    bottle_check.set(1)
    chair_check.set(1)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def detect_image():
    global threshold, files_path, active_image
    print('GUI_support.detect_image')

    if active_image != None or len(files_path)!=0:
        desired_classes = []
        if person_check.get() == 1:
            desired_classes.append(1)
        if cat_check.get() == 1:
            desired_classes.append(2)
        if dog_check.get() == 1:
            desired_classes.append(3)
        if bottle_check.get() == 1:
            desired_classes.append(4)
        if chair_check.get() == 1:
            desired_classes.append(5)
        desired_classes = np.array(desired_classes)

        try:
            SCORE_THRESHOLD = float(threshold.get())
        except:
            SCORE_THRESHOLD = 0.6
            threshold.set('0.6')
        if SCORE_THRESHOLD >= 0 and SCORE_THRESHOLD <= 1:
            image_path = files_path[active_image]
            if(model1.get() == 1):
                image = image_object_detection.detect_objects(image_path, SCORE_THRESHOLD, desired_classes)
            if(model2.get() == 1):
                image = image_object_detection.detect_objects(image_path, SCORE_THRESHOLD, desired_classes)
            if(model3.get() == 1):
                image = ssdlite_object_detection.detect_objects(image_path, SCORE_THRESHOLD, desired_classes)
            
            photo = ImageTk.PhotoImage(Image.open('cache/temp.jpg'))
            w.Label3.config(image = photo) 
            w.Label3.image = photo
    
    sys.stdout.flush()

def next_image():
    global files_path, active_image
    print('GUI_support.next_image')

    if active_image != None or len(files_path)!=0:
        active_image = (active_image+1)%len(files_path)
        photo = ImageTk.PhotoImage(Image.open(files_path[active_image]))
        w.Label3.config(image = photo) 
        w.Label3.image = photo


    sys.stdout.flush()

def open_files():
    global files_path, active_image
    print('GUI_support.open_files')
    from tkinter import filedialog
    files_path = filedialog.askopenfilenames(parent=root,title='Choose a file')
    
    """
    img = cv2.imread(files_path[0], cv2.IMREAD_UNCHANGED)
 
    print('Original Dimensions : ',img.shape)
 
    width = 680
    height = 650 # keep original height
    dim = (width, height)
 
    # resize image
    resized = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)
 
    print('Resized Dimensions : ',resized.shape)
    cv2.imwrite('temp.jpg',resized)
    """
    if len(files_path)>0:
        active_image=0
        photo = ImageTk.PhotoImage(Image.open(files_path[active_image]))
        w.Label3.config(image = photo) 
        w.Label3.image = photo
    else:
        print('No files selected')
    sys.stdout.flush()

def previous_image():
    global files_path, active_image
    print('GUI_support.previous_image')
    if active_image != None or len(files_path)!=0:
        if active_image>0:
            active_image = (active_image-1)%len(files_path)
        else:
            active_image = len(files_path)-1
        photo = ImageTk.PhotoImage(Image.open(files_path[active_image]))
        w.Label3.config(image = photo) 
        w.Label3.image = photo
    sys.stdout.flush()

def save_annotation():
    global active_image
    if active_image != None:
        data = pd.read_csv('cache/anto.csv')
        colors = data.index.to_numpy()
        data = data.to_numpy()
        anto_data = """<antonation>\n"""
        print(data.shape)
        print(data)
        for i in range(len(colors)):
            color,ymin,xmin,ymax,xmax = data[i]
            if color == 'Azure':     color = 'Bottle'
            elif color == 'Chartreuse':     color = 'Person'
            elif color == 'Aqua':     color = 'Cat'
            elif color == 'Aquamarine':     color = 'Dog'
            elif color == 'Beige':     color = 'Chair'

            anto_data = anto_data+"\t<{0}>\n\t\t<ymin>{1}</ymin>\n\t\t<xmin>{2}</xmin>\n\t\t<ymax>{3}</ymax>\n\t\t<xmax>{4}</xmax>\n\t<{5}>\n".format(color,ymin,xmin,ymax,xmax,color)
        anto_data = anto_data+"<antonation>"
        files = [('XML File', '*.xml')] 
        xml_file=asksaveasfile(filetypes = files, mode='w',defaultextension=files)
        xml_file.write(anto_data)
        xml_file.close

    print('GUI_support.save_annotation')
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import GUI
    GUI.vp_start_gui()




